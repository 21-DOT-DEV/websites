name: Deploy to Cloudflare Pages

on:
  workflow_call:
    inputs:
      website:
        required: true
        type: string
        description: 'Site name to deploy'
      deploy-to-production:
        required: true
        type: boolean
        description: 'Whether to deploy to production (main branch) or preview'
    secrets:
      cloudflare-api-token:
        required: true
        description: 'Cloudflare API Token'
      cloudflare-account-id:
        required: true
        description: 'Cloudflare Account ID'

jobs:
  build:
    runs-on: macos-15
    env:
      DEVELOPER_DIR: "/Applications/Xcode_16.4.app/Contents/Developer"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Swift Package Manager
        uses: actions/cache@v3
        with:
          path: |
            .build
            ~/.cache/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Build Dependencies
        run: swift build --configuration release

      - name: Run Tests
        run: swift test --parallel

      - name: Generate Site
        run: swift run ${{ inputs.website }}

      - name: Compile Tailwind CSS
        run: |
          swift package --disable-sandbox tailwindcss \
            --input Resources/${{ inputs.website }}/static/style.css \
            --output Websites/${{ inputs.website }}/static/style.output.css \
            --config Resources/${{ inputs.website }}/tailwind.config.cjs

      - name: Verify Build Output
        run: |
          echo "Checking build output..."
          ls -la Websites/${{ inputs.website }}/
          if [ ! -f "Websites/${{ inputs.website }}/index.html" ]; then
            echo "Error: index.html not found in build output"
            exit 1
          fi
          if [ ! -f "Websites/${{ inputs.website }}/static/style.output.css" ]; then
            echo "Error: compiled CSS not found in build output"
            exit 1
          fi
          echo "Build output verified successfully"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.website }}-build
          path: Websites/${{ inputs.website }}/
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      DEPLOYMENT_BRANCH: preview
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: read
      deployments: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check for Production Deployment
        run: |
          if [[ ${{ inputs.deploy-to-production }} == true ]]; then
            echo "DEPLOYMENT_BRANCH=main" >> $GITHUB_ENV
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.website }}-build
          path: Websites/${{ inputs.website }}

      - name: Publish to Cloudflare Pages
        id: cloudflare
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.cloudflare-api-token }}
          accountId: ${{ secrets.cloudflare-account-id }}
          projectName: ${{ inputs.website }}
          directory: Websites/${{ inputs.website }}
          branch: ${{ env.DEPLOYMENT_BRANCH }}
          wranglerVersion: '3'

      - name: Prepare comment body
        if: github.event_name == 'pull_request'
        id: format-output
        run: |
          if [ "${{ steps.cloudflare.outcome }}" == "failure" ]; then
            DEPLOYMENT_STATUS="‚ùå Deployment Failed!"
          else
            DEPLOYMENT_STATUS="‚úÖ Deployment Successful!"
          fi

          echo "DEPLOYMENT_TEXT<<EOF" >> $GITHUB_ENV
          echo "### Deploying Preview for ${{ inputs.website }} üöÄ" >> $GITHUB_ENV
          echo "---" >> $GITHUB_ENV
          echo "| **Name** | **Result** |" >> $GITHUB_ENV
          echo "|---------------------------------|------------------------|" >> $GITHUB_ENV
          echo "|üîÄ Latest Commit | ${{ github.sha }} |" >> $GITHUB_ENV
          echo "|üõ∞Ô∏è Status | $DEPLOYMENT_STATUS |" >> $GITHUB_ENV
          echo "|ü™µ Action Run | [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_ENV
          echo "|üîç Preview Url | [${{ steps.cloudflare.outputs.url }}](${{ steps.cloudflare.outputs.url }}) |" >> $GITHUB_ENV
          echo "|üïµüèª‚Äç‚ôÇÔ∏è Alias Url | [${{ steps.cloudflare.outputs.alias }}](${{ steps.cloudflare.outputs.alias }}) |" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Deployment Preview Comment
        if: github.event_name == 'pull_request'
        run: |
          # Try to edit last comment, fallback to creating new comment if none exists
          if ! gh issue comment ${{ github.event.pull_request.number }} --edit-last --body "${{ env.DEPLOYMENT_TEXT }}" 2>/dev/null; then
            echo "No previous comment found, creating new comment..."
            gh issue comment ${{ github.event.pull_request.number }} --body "${{ env.DEPLOYMENT_TEXT }}"
          fi
