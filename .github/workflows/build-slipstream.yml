name: Build Slipstream Site

on:
  workflow_call:
    inputs:
      website:
        description: 'Site name to build (e.g., 21-dev)'
        required: true
        type: string
    outputs:
      artifact-name:
        description: 'Name of the uploaded build artifact'
        value: ${{ jobs.build.outputs.artifact-name }}

jobs:
  build:
    name: Build ${{ inputs.website }}
    runs-on: macos-15
    env:
      DEVELOPER_DIR: "/Applications/Xcode_16.4.app/Contents/Developer"
    outputs:
      artifact-name: ${{ inputs.website }}-build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.cache/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-
      
      - name: Build dependencies
        run: swift build --configuration release --target ${{ inputs.website }}
      
      - name: Run tests
        run: swift test --parallel
      
      - name: Generate site
        run: swift run ${{ inputs.website }}
      
      - name: Compile Tailwind CSS
        run: |
          website="${{ inputs.website }}"
          config_file="Resources/${website}/tailwind.config.cjs"
          
          # Find all CSS input files using the flexible pattern
          css_files=$(find "Resources/${website}" -name "style.input.css" -path "*/static/style.input.css" 2>/dev/null || true)
          
          if [ -z "$css_files" ]; then
            echo "Error: No CSS input files found in Resources/${website}"
            echo "Expected pattern: Resources/${website}/*/static/style.input.css"
            exit 1
          fi
          
          echo "Found CSS input files:"
          echo "$css_files"
          
          # Compile each CSS file
          while IFS= read -r input_file; do
            # Extract the page path from the input file
            # e.g., Resources/21-dev/static/style.input.css -> static
            # e.g., Resources/21-dev/p256k/static/style.input.css -> p256k/static
            relative_path=$(echo "$input_file" | sed "s|Resources/${website}/||" | sed 's|/style\.input\.css$||')
            
            if [ "$relative_path" = "static" ]; then
              # Root CSS file
              output_file="Websites/${website}/static/style.css"
              echo "Compiling root CSS: $input_file -> $output_file"
            else
              # Page-specific CSS file
              output_file="Websites/${website}/${relative_path}/style.css"
              echo "Compiling page CSS: $input_file -> $output_file"
              
              # Ensure output directory exists
              mkdir -p "$(dirname "$output_file")"
            fi
            
            # Compile the CSS file
            if ! swift package --disable-sandbox tailwindcss \
              --input "$input_file" \
              --output "$output_file" \
              --config "$config_file"; then
              echo "Error: Failed to compile $input_file"
              exit 1
            fi
            
            echo "Successfully compiled: $output_file"
          done <<< "$css_files"
      
      - name: Verify build output
        run: |
          website="${{ inputs.website }}"
          echo "Checking build output..."
          ls -la Websites/${website}/
          
          # Verify index.html exists
          if [ ! -f "Websites/${website}/index.html" ]; then
            echo "Error: index.html not found in build output"
            exit 1
          fi
          
          # Verify CSS files exist - check for compiled CSS files
          css_found=false
          
          # Look for any compiled CSS files that should exist
          if find "Websites/${website}" -name "style.css" -path "*/static/style.css" | grep -q .; then
            css_found=true
            echo "Found compiled CSS files:"
            find "Websites/${website}" -name "style.css" -path "*/static/style.css"
          fi
          
          if [ "$css_found" = false ]; then
            echo "Error: No compiled CSS files found in build output"
            echo "Expected at least one file matching: Websites/${website}/*/static/style.css"
            exit 1
          fi
          
          echo "âœ… Build output verified successfully"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.website }}-build
          path: Websites/${{ inputs.website }}/
          retention-days: 1
